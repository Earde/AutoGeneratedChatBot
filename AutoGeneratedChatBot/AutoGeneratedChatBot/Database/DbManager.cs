using AutoGeneratedChatBot.Database;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoGeneratedChatBot
{
    class DbManager
    {
        string connectionString = @"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=AutoGeneratedChatBotDB;Integrated Security=True;Persist Security Info=False;Pooling=False;MultipleActiveResultSets=False;Connect Timeout=60;Encrypt=False;TrustServerCertificate=True";
        SqlConnection conn;
        Random rand;

        public DbManager()
        {
            conn = new SqlConnection(connectionString);
            rand = new Random();
        }

        public bool Open()
        {
            try
            {
                conn.Open();
                /*
                List<string> tables = new List<string>();
                DataTable table = conn.GetSchema("Tables");
                foreach (DataRow row in table.Rows)
                {
                    string tablename = (string)row[2];
                    tables.Add(tablename);
                }
                foreach (string s in tables)
                {
                    Console.WriteLine(s);
                }
                */
                return true;
            }
            
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
            return false;
        }

        public void Close()
        {
            conn.Close();
        }

        //get stop word index
        public int GetStopWord()
        {
            return Append.GetWordIndex(conn, ".");
        }

        public void AddWords(string[] words)
        {
            Append.AddWords(conn, words);
        }

        public string GetSentence(int stopIndex, bool story)
        {
            return Get.GetSentence(conn, rand, stopIndex, story);
        }

        public string GetStats()
        {
            string answer = "";
            int count = Get.UniqueConnectionCombination(conn);
            if (count != -1)
            {
                answer += "Unieke combinaties aantal is " + count.ToString();
            }
            count = Get.TotalConnectionCombination(conn) - count;
            if (count != -1)
            {
                answer += " met " + count.ToString() + " aan meervoudige combinaties";
            }
            answer += "\n\n";
            count = Get.TotalStartWords(conn);
            if (count != -1)
            {
                answer += "Start woorden aantal is " + count.ToString();
            }
            count = Get.TotalWords(conn) - count;
            if (count != -1)
            {
                answer += " met " + count.ToString() + " aan vervolg woorden";
            }
            
            return answer;
        }
    }
}