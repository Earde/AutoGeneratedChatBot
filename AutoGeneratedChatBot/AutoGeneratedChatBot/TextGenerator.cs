using System;
using System.Collections.Generic;
using Telegram.Bot;
using Telegram.Bot.Args;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types;
using System.Linq;
using System.Data.SqlClient;

namespace AutoGeneratedChatBot
{
    class TextGenerator
    {
        private static readonly TelegramBotClient bot = new TelegramBotClient("782389542:AAG8dI6JEbs-7exXG1fMpE02iJmyobgHWeo");
        private static Random rand = new Random();
        private static Int64 chatID = -1001401117617;
        private static int messageCounter = 0;
        private static int messageRandom;
        private static User me;
        private static bool running = false;
        private static int stopIndex = -1;

        private static DbManager db = new DbManager();

        public TextGenerator()
        {
            messageRandom = rand.Next(4, 7);
            me = bot.GetMeAsync().Result;
            Console.Title = me.Username;
            bot.OnMessage += BotOnMessageReceived;
        }

        public void Run()
        {
            if (!running)
            {
                db.Open();
                bot.StartReceiving();
                Console.WriteLine($"Start listening for @{me.Username}");
                //var start = bot.SendTextMessageAsync(chatID, "Guess who's back? Fucking " + me.FirstName + " is back bitches.\r\nType /help for all the shit I can do.").Result;
                running = true;
            }
        }

        public void Stop()
        {
            if (running)
            {
                bot.StopReceiving();
                db.Close();
                Console.WriteLine($"Stop listening for @{me.Username}");
                //var end = bot.SendTextMessageAsync(chatID, "RIP " + me.FirstName).Result;
                running = false;
            }
        }

        private static void SendMessage(int count)
        {
            if (stopIndex == -1)
            {
                stopIndex = db.GetStopWord();
            }
            else
            {
                string message = "";
                for (int i = 0; i < count; i++)
                {
                    message += db.GetSentence(stopIndex) + "\n\n";
                }
                if (!string.IsNullOrWhiteSpace(message))
                {
                    var send = bot.SendTextMessageAsync(chatID, message).Result;
                }
            }
        }

        private static void BotOnMessageReceived(object sender, MessageEventArgs messageEventArgs)
        {
            var message = messageEventArgs.Message;
            if (message == null || message.Type != MessageType.Text) return;
            if (message.Text == null || string.IsNullOrEmpty(message.Text)) return;
            if (message.Chat.Id != chatID)
            {
                return;
            }
            if(message.Text.StartsWith("/help"))
            {
                var send = bot.SendTextMessageAsync(chatID, "/talkbitch\r\n").Result;
            }
            else if (message.Text.StartsWith("/talkbitch"))
            {
                SendMessage(5);
            }
            else if (!message.Text.StartsWith("/") && !message.Text.StartsWith("@"))
            {
                string[] alineas = message.Text.Split('\n');
                foreach (string a in alineas)
                {
                    if (!string.IsNullOrWhiteSpace(a))
                    {
                        AddSentence(a);
                    }
                }
                messageCounter++;
            }

            if (messageCounter >= messageRandom)
            {
                messageCounter = 0;
                messageRandom = rand.Next(4, 7);
                SendMessage(1);
            }
        }

        private static void AddSentence(string input)
        {
            string temp = input;
            //check if parentheses are balanced if not trim them
            if (!Utilities.CheckParentheses(temp))
            {
                temp = temp.Trim(new char[] { '{', '}', '[', ']', '(', ')' });
            }
            //add dot so bot knows that a sentence is finished
            temp += " .";
            //split in words
            //remove empty and url's
            string[] words = temp.Split(' ');
            words = words.Where(x => !string.IsNullOrWhiteSpace(x) && !Uri.IsWellFormedUriString(x, UriKind.Absolute)).ToArray();
            db.AddWords(words);
        }
    }
}
