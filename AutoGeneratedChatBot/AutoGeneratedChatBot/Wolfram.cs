using System;
using System.Collections.Generic;
using System.Device.Location;
using System.Web;
using Wolfram.Alpha;
using Wolfram.Alpha.Models;
using Yandex.Translator;

namespace AutoGeneratedChatBot
{
    class Wolfram
    {
        public static string GetTranslation(IYandexTranslator translator, string input)
        {
            string translation = HttpUtility.UrlEncode(input);
            try
            {
                translation = translator.Translate("nl-en", translation).Text;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.StackTrace);
            }
            translation = HttpUtility.UrlDecode(translation);
            return translation;
        }

        public static string AskWolfram(WolframAlphaService wolfram, string input)
        {
            string alphaMessage = "";
            try
            {
                WolframAlphaRequest request = new WolframAlphaRequest(input);
                request.Formats = new List<string> { Format.Plaintext };
                request.IncludePodIds = new List<string> { "Result" };
                request.IgnoreCase = true;
                request.Translation = false;
                request.Scanners = new List<string> { "Numeric", "Data", "Word" };
                request.GeoCoordinate = new GeoCoordinate(53.211004, 5.729472);
                request.FormatTimeout = 5;
                request.PodTimeout = 5;
                request.Reinterpret = true;
                request.Unit = Unit.Metric;
                request.Async = false;
                request.Width = 1000;

                WolframAlphaResult result = wolfram.Compute(request).Result;

                if (result != null)
                {
                    if (result.QueryResult.Pods != null)
                    {
                        foreach (Pod pod in result.QueryResult.Pods)
                        {
                            if (pod.SubPods != null && pod.SubPods.Count > 0)
                            {
                                foreach (SubPod sub in pod.SubPods)
                                {
                                    if (!string.IsNullOrWhiteSpace(sub.Plaintext))
                                    {
                                        alphaMessage += sub.Plaintext + ", ";
                                    }
                                }
                                alphaMessage = alphaMessage.Remove(alphaMessage.Length - 2, 2);
                            }
                        }
                    }
                }
            } catch (Exception e)
            {
                Console.WriteLine(e.StackTrace);
            }
            
            return alphaMessage;
        }
    }
}
